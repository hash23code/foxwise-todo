"use client";

import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Sparkles, Plus, Loader2, Calendar, Filter, FileText } from "lucide-react";
import AIReportViewer from "./AIReportViewer";

interface AIReportsSectionProps {
  language: 'en' | 'fr';
}

export default function AIReportsSection({ language }: AIReportsSectionProps) {
  const [loading, setLoading] = useState(false);
  const [generating, setGenerating] = useState(false);
  const [reports, setReports] = useState<any[]>([]);
  const [selectedReport, setSelectedReport] = useState<any | null>(null);
  const [showGenerator, setShowGenerator] = useState(false);

  // Generator form state
  const [reportType, setReportType] = useState<'daily' | 'weekly' | 'monthly'>('monthly');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [categoryFilter, setCategoryFilter] = useState('all');
  const [categories, setCategories] = useState<string[]>([]);

  const t = language === 'fr' ? {
    title: 'Rapports IA',
    subtitle: 'Analyses détaillées générées par intelligence artificielle',
    generateNew: 'Générer un Nouveau Rapport IA',
    generating: 'Génération en cours...',
    savedReports: 'Rapports Sauvegardés',
    noReports: 'Aucun rapport généré. Créez votre premier rapport IA!',
    reportType: 'Type de Rapport',
    daily: 'Quotidien',
    weekly: 'Hebdomadaire',
    monthly: 'Mensuel',
    startDate: 'Date de Début',
    endDate: 'Date de Fin',
    category: 'Catégorie',
    allCategories: 'Toutes les Catégories',
    generate: 'Générer',
    cancel: 'Annuler',
    aiPowered: 'Propulsé par IA',
    loading: 'Chargement...',
  } : {
    title: 'AI Reports',
    subtitle: 'Detailed insights generated by artificial intelligence',
    generateNew: 'Generate New AI Report',
    generating: 'Generating...',
    savedReports: 'Saved Reports',
    noReports: 'No reports generated yet. Create your first AI report!',
    reportType: 'Report Type',
    daily: 'Daily',
    weekly: 'Weekly',
    monthly: 'Monthly',
    startDate: 'Start Date',
    endDate: 'End Date',
    category: 'Category',
    allCategories: 'All Categories',
    generate: 'Generate',
    cancel: 'Cancel',
    aiPowered: 'AI Powered',
    loading: 'Loading...',
  };

  useEffect(() => {
    fetchReports();
    fetchCategories();
  }, []);

  useEffect(() => {
    // Auto-set dates based on report type
    const today = new Date();
    if (reportType === 'daily') {
      setStartDate(today.toISOString().split('T')[0]);
      setEndDate(today.toISOString().split('T')[0]);
    } else if (reportType === 'weekly') {
      const weekAgo = new Date(today);
      weekAgo.setDate(weekAgo.getDate() - 6);
      setStartDate(weekAgo.toISOString().split('T')[0]);
      setEndDate(today.toISOString().split('T')[0]);
    } else if (reportType === 'monthly') {
      const monthStart = new Date(today.getFullYear(), today.getMonth(), 1);
      const monthEnd = new Date(today.getFullYear(), today.getMonth() + 1, 0);
      setStartDate(monthStart.toISOString().split('T')[0]);
      setEndDate(monthEnd.toISOString().split('T')[0]);
    }
  }, [reportType]);

  const fetchReports = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/ai-reports');
      if (response.ok) {
        const data = await response.json();
        setReports(data);
      }
    } catch (error) {
      console.error('Error fetching AI reports:', error);
    } finally {
      setLoading(false);
    }
  };

  const fetchCategories = async () => {
    try {
      const response = await fetch('/api/todo-lists');
      if (response.ok) {
        const data = await response.json();
        setCategories(data.map((list: any) => list.name));
      }
    } catch (error) {
      console.error('Error fetching categories:', error);
    }
  };

  const handleGenerate = async () => {
    setGenerating(true);
    try {
      const response = await fetch('/api/ai-reports/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          reportType,
          periodStart: startDate,
          periodEnd: endDate,
          categoryFilter: categoryFilter === 'all' ? null : categoryFilter,
          language,
        }),
      });

      if (response.ok) {
        const newReport = await response.json();
        setReports([newReport, ...reports]);
        setSelectedReport(newReport);
        setShowGenerator(false);
      } else {
        const error = await response.json();
        alert(error.error || 'Failed to generate report');
      }
    } catch (error) {
      console.error('Error generating AI report:', error);
      alert('Failed to generate report');
    } finally {
      setGenerating(false);
    }
  };

  const handleDelete = async (id: string) => {
    try {
      const response = await fetch(`/api/ai-reports/${id}`, {
        method: 'DELETE',
      });

      if (response.ok) {
        setReports(reports.filter(r => r.id !== id));
        if (selectedReport?.id === id) {
          setSelectedReport(null);
        }
      }
    } catch (error) {
      console.error('Error deleting report:', error);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <Loader2 className="w-8 h-8 text-purple-400 animate-spin" />
        <span className="ml-3 text-gray-400">{t.loading}</span>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
            {t.title}
          </h2>
          <p className="text-gray-400 text-sm mt-1">{t.subtitle}</p>
        </div>

        {!showGenerator && (
          <button
            onClick={() => setShowGenerator(true)}
            className="flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white rounded-lg transition-all shadow-lg"
          >
            <Sparkles className="w-4 h-4" />
            {t.generateNew}
          </button>
        )}
      </div>

      {/* Generator Form */}
      <AnimatePresence>
        {showGenerator && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            className="bg-gradient-to-br from-purple-900/20 to-pink-900/20 rounded-xl p-6 border border-purple-500/30 overflow-hidden"
          >
            <div className="flex items-center gap-2 mb-4">
              <Sparkles className="w-5 h-5 text-purple-400" />
              <h3 className="text-lg font-semibold text-white">{t.generateNew}</h3>
              <span className="text-xs text-purple-400 bg-purple-400/10 px-2 py-1 rounded">{t.aiPowered}</span>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              {/* Report Type */}
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  {t.reportType}
                </label>
                <select
                  value={reportType}
                  onChange={(e) => setReportType(e.target.value as any)}
                  className="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-purple-500"
                >
                  <option value="daily">{t.daily}</option>
                  <option value="weekly">{t.weekly}</option>
                  <option value="monthly">{t.monthly}</option>
                </select>
              </div>

              {/* Category Filter */}
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  <Filter className="w-4 h-4 inline mr-1" />
                  {t.category}
                </label>
                <select
                  value={categoryFilter}
                  onChange={(e) => setCategoryFilter(e.target.value)}
                  className="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-purple-500"
                >
                  <option value="all">{t.allCategories}</option>
                  {categories.map(cat => (
                    <option key={cat} value={cat}>{cat}</option>
                  ))}
                </select>
              </div>

              {/* Start Date */}
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  {t.startDate}
                </label>
                <input
                  type="date"
                  value={startDate}
                  onChange={(e) => setStartDate(e.target.value)}
                  className="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-purple-500"
                />
              </div>

              {/* End Date */}
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  {t.endDate}
                </label>
                <input
                  type="date"
                  value={endDate}
                  onChange={(e) => setEndDate(e.target.value)}
                  className="w-full px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg text-white focus:outline-none focus:border-purple-500"
                />
              </div>
            </div>

            <div className="flex items-center gap-3">
              <button
                onClick={handleGenerate}
                disabled={generating || !startDate || !endDate}
                className="flex items-center gap-2 px-6 py-2 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {generating ? (
                  <>
                    <Loader2 className="w-4 h-4 animate-spin" />
                    {t.generating}
                  </>
                ) : (
                  <>
                    <Sparkles className="w-4 h-4" />
                    {t.generate}
                  </>
                )}
              </button>
              <button
                onClick={() => setShowGenerator(false)}
                className="px-6 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors"
              >
                {t.cancel}
              </button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Selected Report Viewer */}
      {selectedReport && (
        <AIReportViewer
          report={selectedReport}
          language={language}
          onDelete={handleDelete}
        />
      )}

      {/* Saved Reports List */}
      {!selectedReport && (
        <div>
          <h3 className="text-lg font-semibold text-white mb-4">{t.savedReports}</h3>
          {reports.length === 0 ? (
            <div className="bg-gray-800/50 rounded-xl p-12 border border-gray-700 text-center">
              <FileText className="w-16 h-16 text-gray-600 mx-auto mb-4" />
              <p className="text-gray-400">{t.noReports}</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {reports.map((report) => (
                <motion.div
                  key={report.id}
                  initial={{ opacity: 0, scale: 0.95 }}
                  animate={{ opacity: 1, scale: 1 }}
                  whileHover={{ scale: 1.02 }}
                  onClick={() => setSelectedReport(report)}
                  className="bg-gradient-to-br from-gray-900 to-gray-800 rounded-xl p-4 border border-gray-700 cursor-pointer hover:border-purple-500/50 transition-all"
                >
                  <div className="flex items-start justify-between mb-3">
                    <Sparkles className="w-5 h-5 text-purple-400" />
                    <span className="text-xs text-gray-500">
                      {new Date(report.created_at).toLocaleDateString(language === 'fr' ? 'fr-FR' : 'en-US')}
                    </span>
                  </div>
                  <h4 className="text-white font-semibold mb-2">{report.title}</h4>
                  <p className="text-sm text-gray-400 mb-3 line-clamp-2">{report.summary}</p>
                  <div className="flex items-center gap-2 text-xs text-gray-500">
                    <Calendar className="w-3 h-3" />
                    <span>{report.period_start} - {report.period_end}</span>
                  </div>
                  {report.category_filter && (
                    <div className="mt-2">
                      <span className="text-xs bg-purple-400/10 text-purple-400 px-2 py-1 rounded">
                        {report.category_filter}
                      </span>
                    </div>
                  )}
                </motion.div>
              ))}
            </div>
          )}
        </div>
      )}

      {/* Back button when viewing a report */}
      {selectedReport && (
        <button
          onClick={() => setSelectedReport(null)}
          className="flex items-center gap-2 px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg transition-colors"
        >
          ← {t.savedReports}
        </button>
      )}
    </div>
  );
}
